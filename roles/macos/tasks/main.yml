- name: Create directory {{ path_home }}/Applications
  ansible.builtin.file:
    path: "{{ path_home }}/Applications"
    state: directory
    mode: 0700

- name: Create file /etc/sudoers.d/custom
  ansible.builtin.template:
    src: sudoers.d/custom.j2
    dest: /etc/sudoers.d/custom
    owner: root
    group: wheel
    mode: 0640
  become: true

- name: Git clone/pull misc projects
  ansible.builtin.git:
    repo: "{{ item.url }}"
    dest: "{{ path_projects }}/{{ item.name }}"
  loop:
    - name: electricboogaloo.16colors
      url: "{{ git_electricboogaloo_16colors }}"
    - name: Project-Assets
      url: "{{ git_projectassets }}"


- name: Create directory {{ path_homebrew }}
  ansible.builtin.file:
    path: "{{ path_homebrew }}"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_gid }}"
    mode: 0700
  become: true

- name: Git clone/pull Homebrew repos
  ansible.builtin.git:
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
  loop:
    - repo: https://github.com/Homebrew/brew.git
      dest: "{{ path_homebrew }}"
    - repo: https://github.com/Homebrew/homebrew-core
      dest: "{{ path_homebrew }}/Library/Taps/homebrew/homebrew-core"
    - repo: https://github.com/Homebrew/homebrew-cask
      dest: "{{ path_homebrew }}/Library/Taps/homebrew/homebrew-cask"

- name: Upgrade all Homebrew packages
  community.general.homebrew:
    update_homebrew: true
    upgrade_all: true

- name: Install Homebrew packages from list 'brew_macos'
  community.general.homebrew:
    name: "{{ brew_macos }}"
    state: latest
  when: brew_macos is defined

- name: Install Homebrew applications from list 'cask_macos'
  community.general.homebrew_cask:
    name: "{{ cask_macos }}"
    state: latest
    install_options: appdir=~/Applications
  when: cask_macos is defined

- name: Install Pip packages from list 'pip_common'
  ansible.builtin.pip:
    name: "{{ pip_common }}"
    state: latest
    executable: "{{ pip_exec }}"
  when: pip_common is defined

- name: Install Pip packages from list 'pip_macos'
  ansible.builtin.pip:
    name: "{{ pip_macos }}"
    state: latest
    executable: "{{ pip_exec }}"
  when: pip_macos is defined


- name: Create directory {{ path_home }}/.terminfo/74
  ansible.builtin.file:
    path: "{{ path_home }}/.terminfo/74"
    state: directory
    mode: 0700

- name: Create misc symbolic links
  ansible.builtin.file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
  loop:
    - src: "{{ path_homebrew }}/bin/ggrep"
      dest: "{{ path_homebrew }}/bin/grep"
    - src: "{{ path_homebrew }}/bin/gls"
      dest: "{{ path_homebrew }}/bin/ls"
    - src: "{{ path_homebrew }}/opt/fzf"
      dest: "{{ path_home }}/.local/share/fzf"
    - src: "{{ path_homebrew }}/opt/zsh-autosuggestions/share/zsh-autosuggestions"
      dest: "{{ path_home }}/.zsh/zsh-autosuggestions"
    - src: "{{ path_dotfiles }}/vscode/keybindings.json"
      dest: "{{ path_home }}/Library/Application Support/Code/User/keybindings.json"
    - src: "{{ path_dotfiles }}/vscode/settings.json"
      dest: "{{ path_home }}/Library/Application Support/Code/User/settings.json"
    - src: "{{ path_dotfiles }}/Misc/Swedish-Pro-No_Dead_Keys.bundle"
      dest: "{{ path_home }}/Library/Keyboard Layouts/Swedish-Pro-No_Dead_Keys.bundle"
    - src: "{{ path_dotfiles }}/Misc/tmux-256color"
      dest: "{{ path_home }}/.terminfo/74/tmux-256color"

- name: Add {{ path_homebrew }}/bin/zsh to /etc/shells
  ansible.builtin.lineinfile:
    path: /etc/shells
    line: "{{ path_homebrew }}/bin/zsh"
  become: true


- name: Execute misc 'defaults' and 'chflags' commands
  ansible.builtin.command:
    cmd: "{{ item }}"
  loop:
    - chflags nohidden ~/Library
    - defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false
  changed_when: false

- name: Check desktop wallpaper
  ansible.builtin.command:
    cmd: sqlite3 ~/Library/Application\ Support/Dock/desktoppicture.db "SELECT value FROM data ORDER BY ROWID DESC LIMIT 1"
  register: dock_wallpaper
  changed_when: false

- name: Set desktop wallpaper
  ansible.builtin.command:
    cmd: sqlite3 ~/Library/Application\ Support/Dock/desktoppicture.db "{{ item }}"
  loop:
    - DELETE FROM data
    - DELETE FROM pictures
    - DELETE FROM preferences
    - "INSERT INTO data (value) VALUES ('{{ path_wallpaper }}')"
    - INSERT INTO preferences (key, data_id, picture_id) VALUES (1, 1, 1)
  notify: restart dock
  when: path_wallpaper not in dock_wallpaper.stdout

- name: Check keyboard layout
  ansible.builtin.command:
    cmd: defaults read com.apple.HIToolbox AppleEnabledInputSources
  register: defaults_read
  changed_when: false

# FIXME: Finish and verify after moving over to new MacBook Pro.
- name: Set keyboard layout
  ansible.builtin.command:
    cmd: "{{ item }}"
  loop:
    #- defaults write com.apple.HIToolbox AppleCurrentKeyboardLayoutInputSourceID -string org.sil.ukelele.keyboardlayout.swedish-pro-nodeadkeys.swedish-pro-nodeadkeys
    - defaults write com.apple.HIToolbox AppleEnabledInputSources -array-add '<dict><key>InputSourceKind</key><string>Keyboard Layout</string><key>KeyboardLayout ID</key><integer>-24875</integer><key>KeyboardLayout Name</key><string>Swedish - Pro - No Dead Keys</string></dict>'
    #- defaults write com.apple.HIToolbox AppleSelectedInputSources -array '<dict><key>InputSourceKind</key><string>Keyboard Layout</string><key>KeyboardLayout ID</key><integer>-24875</integer><key>KeyboardLayout Name</key><string>Swedish - Pro - No Dead Keys</string></dict>'
    #- defaults write com.apple.HIToolbox AppleSelectedInputSources -array-add '<dict><key>Bundle ID</key><string>com.apple.PressAndHold</string><key>InputSourceKind</key><string>Non Keyboard Input Method</string></dict>'
  when: '"Swedish - Pro - No Dead Keys" not in defaults_read.stdout'


- name: Check installed Visual Studio Code extensions
  ansible.builtin.command:
    cmd: code --list-extensions
  register: code_extensions
  changed_when: false

- name: Install Visual Studio Code extensions
  ansible.builtin.command:
    cmd: code --install-extension "{{ item }}"
  loop:
    - asvetliakov.vscode-neovim
    - golang.go
    - ms-azuretools.vscode-docker
    - ms-python.python
    - ms-python.vscode-pylance
    - ms-vscode-remote.remote-containers
    - ms-vscode-remote.remote-ssh
    - ms-vscode-remote.remote-ssh-edit
    - redhat.ansible
    - redhat.vscode-yaml
  when: item not in code_extensions.stdout
